<?phpnamespace Nemundo\Content\App\Camera\Content\Camera;use Nemundo\Content\App\Camera\Data\Camera\Camera;use Nemundo\Content\Builder\IndexBuilder;use Nemundo\Content\Index\Geo\Action\GeoIndexContentAction;use Nemundo\Content\Type\AbstractContentImport;use Nemundo\Content\Type\Index\ContentIndexContentAction;use Nemundo\Core\Debug\Debug;use Nemundo\Core\File\UniqueFilename;use Nemundo\Core\Http\Request\File\AbstractFileRequest;use Nemundo\Core\Image\Exif\Exif;use Nemundo\Core\Image\ImageFile;use Nemundo\Core\File\File;use Nemundo\Core\WebRequest\CurlWebRequest;use Nemundo\Project\Path\TmpPath;class CameraContentImport extends AbstractContentImport{    public function fromFilename($filename)    {        $exif = new Exif($filename);        //(new Debug())->write($exif->dateTime);        //exit;        $image = new ImageFile($filename);        $data = new Camera();        $data->image->fromFilename($filename);        $data->camera = $exif->camera;        if ($exif->hasDateTime) {            $data->dateTime = $exif->dateTime;            $data->date = $exif->dateTime->getDate();            $data->year = $exif->dateTime->getYear();        }        $data->hasGeoCoordinate=false;        if ($exif->hasCoordinate()) {            $data->hasGeoCoordinate=true;            $data->geoCoordinate=$exif->geoCoordinate;        }        $data->width = $image->width;        $data->height = $image->height;        $data->filesize = $image->getFileSize();        $dataId = $data->save();        $cameraType = new CameraType($dataId);        //(new ContentIndexAction())->onAction($cameraType);        (new IndexBuilder())->buildIndex($cameraType);        /*        if ($exif->hasCoordinate()) {            $geoAction=new GeoIndexAction();            $geoAction->onAction($cameraType);        }*/        (new File($filename))->deleteFile();        return $dataId;    }    public function fromUrl($url)    {        $filename = (new TmpPath())            ->addPath((new UniqueFilename())->getUniqueFilename('jpg'))            ->getFilename();        (new CurlWebRequest())->downloadUrl($url, $filename);        $dataId = $this->fromFilename($filename);        return $dataId;    }    public function fromFileRequest(AbstractFileRequest $fileRequest)    {        $filename = $this->getTmpFilename($fileRequest->filenameExtension);        $fileRequest->saveFile($filename);        $dataId = $this->fromFilename($filename);        return $dataId;    }    private function getTmpFilename($filenameExtension)    {        $filename = (new TmpPath())            //->addPath((new UniqueFilename())->getUniqueFilename('jpg'))            ->addPath((new UniqueFilename())->getUniqueFilename($filenameExtension))            ->getFilename();        return $filename;    }    public function importData()    {    }}