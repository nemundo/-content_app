<?phpnamespace Nemundo\Content\App\Feed\Content\Feed;use Nemundo\Content\App\Feed\Data\Article\ArticlePaginationReader;use Nemundo\Content\App\Feed\Data\Article\ArticleReader;use Nemundo\Content\App\Feed\Data\Feed\FeedReader;use Nemundo\Content\App\Feed\Data\Feed\FeedRow;use Nemundo\Content\Type\AbstractContentItem;use Nemundo\Db\Sql\Order\SortOrder;class FeedItem extends AbstractContentItem{    protected function loadItem()    {        $this->contentType = new FeedType();    }    protected function onDataRow()    {        $this->dataRow = (new FeedReader())->getRowById($this->dataId);    }    /**     * @return \Nemundo\Model\Row\AbstractModelDataRow|FeedRow     */    public function getDataRow()    {        return parent::getDataRow();    }    public function getSubject()    {        return $this->getDataRow()->title;    }    public function getArticleReader()    {        $reader = new ArticleReader();        $reader->filter->andEqual($reader->model->feedId, $this->getDataId());        $reader->addOrder($reader->model->dateTime, SortOrder::DESCENDING);        return $reader;    }    public function getArticlePaginationReader()    {        $reader = new ArticlePaginationReader();        $reader->filter->andEqual($reader->model->feedId, $this->getDataId());        $reader->addOrder($reader->model->dateTime, SortOrder::DESCENDING);        return $reader;    }    public function getData()    {        $row = $this->getDataRow();        $data = [];        $data['id'] = $row->id;        $data['title'] = $row->title;        $data['description'] = $row->description;        $data['feed_url'] = $row->feedUrl;        return $data;    }}