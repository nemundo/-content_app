<?phpnamespace Nemundo\Content\App\Feed\Install;use Nemundo\App\Application\Setup\ApplicationSetup;use Nemundo\App\Application\Type\Install\AbstractInstall;use Nemundo\App\Scheduler\Setup\SchedulerSetup;use Nemundo\App\Script\Setup\ScriptSetup;use Nemundo\App\WebService\Setup\ServiceRequestSetup;use Nemundo\Content\App\Feed\Application\FeedApplication;use Nemundo\Content\App\Feed\Content\Article\ArticleType;use Nemundo\Content\App\Feed\Content\Feed\FeedType;use Nemundo\Content\App\Feed\Data\EnclosureType\EnclosureType;use Nemundo\Content\App\Feed\Data\FeedModelCollection;use Nemundo\Content\App\Feed\Job\FeedImportJob;use Nemundo\Content\App\Feed\Scheduler\FeedImportScheduler;use Nemundo\Content\App\Feed\Script\FeedCleanScript;use Nemundo\Content\App\Feed\Service\FeedImportService;use Nemundo\Content\App\Feed\Service\FeedItemListService;use Nemundo\Content\App\Feed\Service\FeedListService;use Nemundo\Content\App\Feed\Service\FeedPostService;use Nemundo\Content\App\Job\Application\JobApplication;use Nemundo\Content\App\Job\Setup\JobSetup;use Nemundo\Content\App\Notification\Application\NotificationApplication;use Nemundo\Content\App\Timeline\Application\TimelineApplication;use Nemundo\Content\Application\ContentApplication;use Nemundo\Content\Setup\ContentTypeSetup;use Nemundo\Model\Setup\ModelCollectionSetup;class FeedInstall extends AbstractInstall{    public function install()    {        //(new JobApplication())->installApp();        //(new TimelineApplication())->installApp();        //(new NotificationApplication())->installApp();        /*        (new ApplicationSetup())            ->addApplication(new FeedApplication());*/        (new ContentApplication())->installApp();        (new ModelCollectionSetup())            ->addCollection(new FeedModelCollection());        (new SchedulerSetup(new FeedApplication()))            ->addScheduler(new FeedImportScheduler());        (new ScriptSetup(new FeedApplication()))            ->addScript(new FeedCleanScript());        (new ContentTypeSetup(new FeedApplication()))            ->addContentType(new FeedType())            ->addContentType(new ArticleType());        /*(new JobSetup(new FeedApplication()))            ->addJob(new FeedImportJob());*/        (new ServiceRequestSetup(new FeedApplication()))            ->addService(new FeedImportService())            ->addService(new FeedPostService())            ->addService(new FeedListService())            ->addService(new FeedItemListService());        $this->addEnclosureType('audio');        $this->addEnclosureType('video');    }    private function addEnclosureType($enclosureType)    {        $data = new EnclosureType();        $data->ignoreIfExists = true;        $data->eenclosureType = $enclosureType;        $data->save();    }}