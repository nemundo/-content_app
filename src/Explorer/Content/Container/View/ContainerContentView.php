<?phpnamespace Nemundo\Content\App\Explorer\Content\Container\View;use Nemundo\Admin\Com\Table\AdminClickableTable;use Nemundo\Admin\Com\Title\AdminSubtitle;use Nemundo\Admin\Com\Title\AdminTitle;use Nemundo\Com\TableBuilder\TableHeader;use Nemundo\Content\App\Explorer\Content\Container\ContainerItem;use Nemundo\Content\App\Explorer\Parameter\RefererContentParameter;use Nemundo\Content\App\Explorer\Site\ContentEditSite;use Nemundo\Content\Builder\ContentBuilder;use Nemundo\Content\Index\Tree\Com\Container\ChildContentTreeContainer;use Nemundo\Content\Index\Tree\Parameter\TreeParameter;use Nemundo\Content\Index\Tree\Reader\ChildContentReader;use Nemundo\Content\Index\Tree\Reader\ChildTreeDataReader;use Nemundo\Content\Index\Tree\Site\ContentRemoveFromTreeSite;use Nemundo\Content\Parameter\ContentParameter;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Type\Text\Html;use Nemundo\Html\Block\Hr;use Nemundo\Html\Paragraph\Paragraph;use Nemundo\Package\Bootstrap\Table\BootstrapClickableTableRow;class ContainerContentView extends AbstractContainerContentView{    protected function loadView()    {        $this->viewName = 'List';        $this->viewId = '54286060-68a1-4a40-a9be-a52144e77cdb';        $this->defaultView = true;    }    public function getContent()    {        $item = new ContainerItem($this->dataId);        $containerRow = $item->getDataRow();        //$contentId = $item->getContentId()        $p = new Paragraph($this);        $p->content = (new Html($containerRow->description))->getValue();  // (new Html($this->contentType->getDataRow()->description))->getValue();        /*$table = new AdminClickableTable($this);        $header = new TableHeader($table);        $header->addText('Subject');        $header->addText('Type');        $header->addEmpty();        $header->addEmpty();*/        $reader = new ChildTreeDataReader();  // new ChildContentTreeContainer() new ChildContentReader();        $reader->contentId=$item->getContentId();  // $this->con contentType = $this->contentType;        foreach ($reader->getData() as $contentRow) {            $subtitle = new AdminTitle($this);  // new AdminSubtitle($this);            $subtitle->content=$contentRow->child->subject;            $builder=new ContentBuilder($contentRow->childId);            $builder->getDefaultView($this);            //$contentType = $contentRow->con child->getContent();            /*$view = $contentType->getDefaultView($this);            $view->redirectSite = $this->redirectSite;*/            (new Hr($this));            /*$row = new BootstrapClickableTableRow($table);            $row->addText($contentRow->child->subject);            $row->addText($contentRow->child->contentType->contentType);            $site = clone(ContentEditSite::$site);            $site->addParameter(new ContentParameter($contentRow->childId));            $row->addIconSite($site);            $site = clone(ContentRemoveFromTreeSite::$site);            $site->addParameter(new TreeParameter($contentRow->id));            $site->addParameter(new RefererContentParameter($this->contentType->getContentId()));            $row->addIconSite($site);            if ($this->redirectSite !== null) {                $site = clone($this->redirectSite);                $site->addParameter(new ContentParameter($contentRow->childId));                $row->addClickableSite($site);            } else {                (new LogMessage())->writeError('ContainerContentView. No Redirect Site.');            }*/        }        return parent::getContent();    }}