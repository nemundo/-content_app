<?phpnamespace Nemundo\Content\App\Explorer\Scheduler;use Nemundo\App\Scheduler\Job\AbstractScheduler;use Nemundo\Content\App\Explorer\Content\Container\ContainerType;use Nemundo\Content\App\Explorer\Store\HomeContentIdStore;use Nemundo\Content\App\File\Content\File\FileContentType;use Nemundo\Content\Index\Tree\Action\TreeContentAction;use Nemundo\Core\File\DirectoryReader;class FileShareImportScheduler extends AbstractScheduler{    protected function loadScheduler()    {        $this->consoleScript=true;        $this->scriptName='explorer-fileshare';    }    public function run()    {        $parentId =   (new HomeContentIdStore())->getValue();        $path=  'D:\Bern';        $this->readPath($path,$parentId);        /*        $reader = new DirectoryReader();        $reader->path = 'D:\Bern';        $reader->includeDirectories=true;        $reader->includeFiles=true;        $reader->recursiveSearch=false;        foreach ($reader->getData() as $file) {            /*            if ($file->isDirectory()) {                $type=new ContainerContentType();                $type->container=$file->filename;                $type->saveType();                $action = new TreeAction($type);                $action->parentId= $parentId;                $action->onAction();            }*/        //}    }    private function readPath($path, $parentId) {        $reader = new DirectoryReader();        $reader->path =$path;        $reader->includeDirectories=true;        $reader->includeFiles=true;        $reader->recursiveSearch=false;        foreach ($reader->getData() as $file) {            if ($file->isDirectory()) {                $type=new ContainerType();                $type->container=$file->filename;                $type->saveType();                $action = new TreeContentAction($type);                $action->parentId= $parentId;                $action->onAction();                $this->readPath($file->fullFilename,$type->getContentId());            }            if ($file->isFile()) {                $type=new FileContentType();                $type->file->fromFilename($file->fullFilename);                $type->saveType();                $action = new TreeContentAction($type);                $action->parentId= $parentId;                $action->onAction();            }        }    }}