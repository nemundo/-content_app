<?phpnamespace Nemundo\Content\App\Share\Action\PrivateShare;use Nemundo\App\Application\Usergroup\AppUsergroup;use Nemundo\Content\Action\AbstractContentAction;use Nemundo\Content\App\Share\Data\PrivateShare\PrivateShare;use Nemundo\Content\App\Share\Site\PrivateShareRedirectSite;use Nemundo\Content\Builder\ContentBuilder;use Nemundo\Content\Parameter\ContentParameter;use Nemundo\Content\Type\AbstractContentItem;use Nemundo\Content\Type\AbstractContentType;use Nemundo\Core\Type\Text\Text;use Nemundo\Package\ResponsiveMail\ResponsiveActionMailMessage;use Nemundo\User\Builder\UserBuilder;use Nemundo\User\Data\User\UserCount;use Nemundo\User\Parameter\SecureTokenParameter;use Nemundo\User\Type\UserType;class PrivateShareContentAction extends AbstractContentAction{    public $email;    public $message;    protected function loadAction()    {        $this->actionLabel = 'Share (private)';        $this->actionId = '13723f6e-9dee-4ed6-983e-c74948c85ebd';        $this->formClass = PrivateShareActionForm::class;        $this->viewClass = PrivateShareActionView::class;    }    public function onAction(AbstractContentItem $item)    {        /*$email = (new Text($this->email))->changeToLowercase()->getValue();        $count = new UserCount();        $count->filter->andEqual($count->model->login, $email);        if ($count->getCount() == 0) {            $builder = new UserBuilder();            $builder->login = $email;            $builder->email = $email;            $builder->createUser();            $builder->addUsergroup(new AppUsergroup());        }        $userId = (new UserType())->fromLogin($email)->getUserId();        $secureToken = (new UserType())->fromLogin($email)->getUserRow()->secureToken;        //$message = $this->message->getValue();        $data = new PrivateShare();        $data->userId = $userId;        $data->contentId = $item->getContentId();        $data->message = $this->message;        $data->save();        $mail = new ResponsiveActionMailMessage();        $mail->mailTo = $email;        $mail->subject = (new ContentBuilder())->getContent($item->getContentId())->getSubject();        $mail->actionText = $this->message;        $mail->actionUrlSite = clone(PrivateShareRedirectSite::$site);        $mail->actionUrlSite->addParameter(new ContentParameter($item->getContentId()));        $mail->actionUrlSite->addParameter(new SecureTokenParameter($secureToken));        $mail->sendMail();*/    }}