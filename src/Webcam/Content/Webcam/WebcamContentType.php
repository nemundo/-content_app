<?phpnamespace Nemundo\Content\App\Webcam\Content\Webcam;use Nemundo\Content\App\ImageTimeline\Content\ImageTimeline\AbstractImageTimelineContentType;use Nemundo\Content\App\Webcam\Data\Webcam\Webcam;use Nemundo\Content\App\Webcam\Data\Webcam\WebcamDelete;use Nemundo\Content\App\Webcam\Data\Webcam\WebcamReader;use Nemundo\Content\App\Webcam\Data\Webcam\WebcamRow;use Nemundo\Content\App\Webcam\Parameter\WebcamParameter;use Nemundo\Content\App\Webcam\Site\WebcamItemSite;use Nemundo\Content\Index\Geo\Type\GeoIndexTrait;use Nemundo\Content\Index\Tree\Com\Form\ContentSearchForm;use Nemundo\Content\Type\AbstractContentType;use Nemundo\Content\Type\JsonContentTrait;use Nemundo\Geo\Coordinate\GeoCoordinateAddition;class WebcamContentType extends AbstractContentType    //  AbstractImageTimelineContentType  // AbstractSearchContentType{    //use JsonContentTrait;    //use GeoIndexTrait;    /**     * @var GeoCoordinateAddition     */    public $geoCoordinate;    public $webcam;    public $imageUrl;    public $sourceUrl = '';    /**     * @var bool     */    // public $imageCrawler = false;    protected function loadContentType()    {        $this->typeLabel = 'Webcam';        $this->typeId = '5bb3d1d4-3866-4c7e-83f4-572a9c00c9e5';        $this->formClassList[] = WebcamContentForm::class;        $this->formClassList[] = ContentSearchForm::class;        $this->viewClassList[] = WebcamContentView::class;        $this->listingClass = WebcamContentList::class;        $this->adminClass = WebcamContentAdmin::class;        $this->viewSite = WebcamItemSite::$site;        $this->parameterClass = WebcamParameter::class;        //$this->crawling = true;    }    protected function onCreate()    {        //$this->crawling = true;        //parent::onCreate();        $data = new Webcam();        $data->webcam = $this->webcam;  // timeline;  //webcam;        $data->imageUrl = $this->imageUrl;        $data->sourceUrl = $this->sourceUrl;        $data->imageCrawler = true;  // $this->imageCrawler;        $data->geoCoordinate = $this->geoCoordinate;        $this->dataId = $data->save();    }    /*    protected function onUpdate()    {        $update = new WebcamUpdate();        $update->webcam = $this->webcam;        $update->imageUrl = $this->imageUrl;        $update->sourceUrl = $this->sourceUrl;        $update->imageCrawler = $this->imageCrawler;        $update->updateById($this->dataId);    }*/    /*   protected function onIndex()       {         //  $this->addSearchText($this->getDataRow()->webcam);       }*/       protected function onDelete()       {           (new WebcamDelete())->deleteById($this->dataId);       }    protected function onDataRow()    {        $this->dataRow = (new WebcamReader())->getRowById($this->dataId);    }    /**     * @return \Nemundo\Content\App\ImageTimeline\Data\ImageTimeline\ImageTimelineRow|\Nemundo\Model\Row\AbstractModelDataRow|WebcamRow     */    public function getDataRow()    {        return parent::getDataRow();    }    /**     * @return WebcamRow     */    /*public function getDataRow()    {        return parent::getDataRow();    }*/    public function getSubject()    {        return $this->getDataRow()->webcam;    }    public function getData()    {        $webcamRow = $this->getDataRow();        $data = [];        $data['webcam'] = $webcamRow->webcam;        $data['image_url'] = $webcamRow->imageUrl;        $data['lat']=$webcamRow->geoCoordinate->latitude;        $data['lon']=$webcamRow->geoCoordinate->longitude;        $data['geo_text']=$webcamRow->geoCoordinate->latitude.'/'.$webcamRow->geoCoordinate->longitude;        return $data;    }    /* public function importJson($data)     {         $this->webcam = $data['webcam'];         $this->imageUrl = $data['image_url'];         $this->saveType();     }     public function getWebcamImageReader()     {         $reader = new WebcamImageReader();         $reader->filter->andEqual($reader->model->webcamId, $this->dataId);         $reader->addOrder($reader->model->dateTime, SortOrder::DESCENDING);         $reader->limit = 20;         return $reader;     }*/}